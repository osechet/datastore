// Code generated by protoc-gen-go. DO NOT EDIT.
// source: osechet/test/test_types.proto

/*
Package osechet_test is a generated protocol buffer package.

It is generated from these files:
	osechet/test/test_types.proto

It has these top-level messages:
	Book
	Tested
*/
package osechet_test

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Book struct {
	Isbn   int64  `protobuf:"varint,1,opt,name=isbn" json:"isbn,omitempty"`
	Title  string `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Author string `protobuf:"bytes,3,opt,name=author" json:"author,omitempty"`
}

func (m *Book) Reset()                    { *m = Book{} }
func (m *Book) String() string            { return proto.CompactTextString(m) }
func (*Book) ProtoMessage()               {}
func (*Book) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Book) GetIsbn() int64 {
	if m != nil {
		return m.Isbn
	}
	return 0
}

func (m *Book) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Book) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

type Tested struct {
	DoubleValue float64 `protobuf:"fixed64,1,opt,name=double_value,json=doubleValue" json:"double_value,omitempty"`
	FloatValue  float32 `protobuf:"fixed32,2,opt,name=float_value,json=floatValue" json:"float_value,omitempty"`
	Int32Value  int32   `protobuf:"varint,3,opt,name=int32_value,json=int32Value" json:"int32_value,omitempty"`
	Int64Value  int64   `protobuf:"varint,4,opt,name=int64_value,json=int64Value" json:"int64_value,omitempty"`
	StringValue string  `protobuf:"bytes,5,opt,name=string_value,json=stringValue" json:"string_value,omitempty"`
}

func (m *Tested) Reset()                    { *m = Tested{} }
func (m *Tested) String() string            { return proto.CompactTextString(m) }
func (*Tested) ProtoMessage()               {}
func (*Tested) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Tested) GetDoubleValue() float64 {
	if m != nil {
		return m.DoubleValue
	}
	return 0
}

func (m *Tested) GetFloatValue() float32 {
	if m != nil {
		return m.FloatValue
	}
	return 0
}

func (m *Tested) GetInt32Value() int32 {
	if m != nil {
		return m.Int32Value
	}
	return 0
}

func (m *Tested) GetInt64Value() int64 {
	if m != nil {
		return m.Int64Value
	}
	return 0
}

func (m *Tested) GetStringValue() string {
	if m != nil {
		return m.StringValue
	}
	return ""
}

func init() {
	proto.RegisterType((*Book)(nil), "osechet.test.Book")
	proto.RegisterType((*Tested)(nil), "osechet.test.Tested")
}

func init() { proto.RegisterFile("osechet/test/test_types.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 218 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0xc1, 0x4a, 0xc4, 0x30,
	0x10, 0x86, 0xc9, 0x6e, 0x5b, 0x70, 0xda, 0x53, 0x10, 0xe9, 0x45, 0xdc, 0xdd, 0xd3, 0x9e, 0x2a,
	0x58, 0xf1, 0x01, 0x3c, 0x79, 0x0e, 0xe2, 0xb5, 0xb4, 0x76, 0xb4, 0xc1, 0xd0, 0x29, 0xcd, 0x54,
	0xf0, 0xb1, 0x7c, 0x43, 0xc9, 0x24, 0xc8, 0x5e, 0x42, 0xe6, 0x9b, 0x8f, 0xfc, 0x3f, 0x81, 0x5b,
	0xf2, 0xf8, 0x3e, 0x21, 0xdf, 0x33, 0xfa, 0x78, 0x74, 0xfc, 0xb3, 0xa0, 0x6f, 0x96, 0x95, 0x98,
	0x74, 0x95, 0xd6, 0x4d, 0xd8, 0x9c, 0x5e, 0x20, 0x7b, 0x26, 0xfa, 0xd2, 0x1a, 0x32, 0xeb, 0x87,
	0xb9, 0x56, 0x07, 0x75, 0xde, 0x1b, 0xb9, 0xeb, 0x6b, 0xc8, 0xd9, 0xb2, 0xc3, 0x7a, 0x77, 0x50,
	0xe7, 0x2b, 0x13, 0x07, 0x7d, 0x03, 0x45, 0xbf, 0xf1, 0x44, 0x6b, 0xbd, 0x17, 0x9c, 0xa6, 0xd3,
	0xaf, 0x82, 0xe2, 0x15, 0x3d, 0xe3, 0xa8, 0x8f, 0x50, 0x8d, 0xb4, 0x0d, 0x0e, 0xbb, 0xef, 0xde,
	0x6d, 0x28, 0x8f, 0x2a, 0x53, 0x46, 0xf6, 0x16, 0x90, 0xbe, 0x83, 0xf2, 0xc3, 0x51, 0xcf, 0xc9,
	0x08, 0x09, 0x3b, 0x03, 0x82, 0xfe, 0x05, 0x3b, 0x73, 0xfb, 0x90, 0x84, 0x90, 0x95, 0x1b, 0x10,
	0x74, 0x29, 0x3c, 0x3d, 0x26, 0x21, 0x93, 0xe2, 0x20, 0x28, 0x0a, 0x47, 0xa8, 0x3c, 0xaf, 0x76,
	0xfe, 0x4c, 0x46, 0x2e, 0x75, 0xcb, 0xc8, 0x44, 0x19, 0x0a, 0xf9, 0x92, 0xf6, 0x2f, 0x00, 0x00,
	0xff, 0xff, 0xab, 0xe5, 0x94, 0x7c, 0x33, 0x01, 0x00, 0x00,
}
